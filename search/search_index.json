{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to rocksnot","text":"<p>python package</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://rlape28.github.io/rocksnot</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":""},{"location":"changelog/#v002-subtle-change","title":"v0.0.2 - Subtle change","text":""},{"location":"changelog/#v003-lab-4","title":"v0.0.3 - Lab 4","text":""},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/rlape28/rocksnot/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>rocksnot could always use more documentation, whether as part of the official rocksnot docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/rlape28/rocksnot/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up rocksnot for local development.</p> <ol> <li> <p>Fork the rocksnot repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/rocksnot.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv rocksnot\n$ cd rocksnot/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 rocksnot tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/rlape28/rocksnot/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install rocksnot, run this command in your terminal:</p> <pre><code>pip install rocksnot\n</code></pre> <p>This is the preferred method to install rocksnot, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for rocksnot can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/rlape28/rocksnot\n</code></pre>"},{"location":"rocksnot/","title":"rocksnot module","text":"<p>Main module.</p>"},{"location":"rocksnot/#rocksnot.rocksnot.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>rocksnot/rocksnot.py</code> <pre><code>class Map(ipyleaflet.Map):\n\n    def __init__(self, center=(20, 0), zoom=2, **kwargs) -&gt; None:\n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n        if \"height\" not in kwargs:\n            self.layout.height = \"500px\"\n        else:\n            self.layout.height = kwargs[\"height\"]\n\n        if \"fullscreen_control\" not in kwargs:\n            kwargs[\"fullscreen_control\"] = True\n        if kwargs[\"fullscreen_control\"]:\n            self.add_fullscreen_control()\n\n        if \"layers_control\" not in kwargs:\n            kwargs[\"layers_control\"] = True\n        if kwargs[\"layers_control\"]:\n            self.add_layers_control()\n\n        if \"add_toolbar\" not in kwargs:\n            kwargs[\"add_toolbar\"] = True\n        if kwargs[\"add_toolbar\"]:\n            self.add_toolbar()\n\n    def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Adds a search control to the map.\"\"\"\n        if \"url\" not in kwargs:\n            kwargs[\"url\"] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n\n        search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n        self.add_control(search_control)\n\n    def add_draw_control(self, **kwargs):\n\"\"\"Adds a draw control to the map.\"\"\"\n        draw_control = ipyleaflet.DrawControl(**kwargs)\n\n        draw_control.polyline =  {\n            \"shapeOptions\": {\n                \"color\": \"#6bc2e5\",\n                \"weight\": 8,\n                \"opacity\": 1.0\n            }\n        }\n        draw_control.polygon = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#6be5c3\",\n                \"color\": \"#6be5c3\",\n                \"fillOpacity\": 1.0\n            },\n            \"drawError\": {\n                \"color\": \"#dd253b\",\n                \"message\": \"Oups!\"\n            },\n            \"allowIntersection\": False\n        }\n        draw_control.circle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#efed69\",\n                \"color\": \"#efed69\",\n                \"fillOpacity\": 1.0\n            }\n        }\n        draw_control.rectangle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#fca45d\",\n                \"color\": \"#fca45d\",\n                \"fillOpacity\": 1.0\n            }\n        }\n\n        self.add_control(draw_control)\n\n    def add_layers_control(self, position=\"topright\"):\n\"\"\"Adds a layers control to the map.\"\"\"\n        layers_control = ipyleaflet.LayersControl(position=position)\n        self.add_control(layers_control)\n\n    def add_fullscreen_control(self, position=\"topleft\"):\n\"\"\"Adds a fullscreen control to the map.\"\"\"\n        fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n        self.add_control(fullscreen_control)\n\n    def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\"\"\"\n        tile_layer = ipyleaflet.TileLayer(url=url, attribution=attribution, name=name, **kwargs)\n        self.add_layer(tile_layer)\n\n    def add_basemap(self, basemap):\n\"\"\"Adds a basemap to the map.\"\"\"\n        import xyzservices.providers as xyz\n\n        if basemap.lower() == \"hybrid\":\n            url = \"https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z}\"\n            self.add_tile_layer(url, name=basemap)\n\n        else:\n            try:\n                layer = eval(f\"xyz.{basemap}\")\n                url = layer.build_url()\n                attribution = layer.attribution\n                self.add_tile_layer(url=url, attribution=attribution, name=basemap)\n\n            except:\n                raise ValueError(f\"Invalid basemap name: {basemap}\")\n\n\n    def add_geojson(self, data, **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\"\"\"\n        import json\n\n        if isinstance(data, str):\n            with open(data, \"r\") as f:\n                data = json.load(f)\n\n        geojson = ipyleaflet.GeoJSON(data=data, **kwargs)\n        self.add_layer(geojson)\n\n    def add_shp(self, data, **kwargs):\n\"\"\"Adds a Shapefile layer to the map.\"\"\"\n        import geopandas as gpd\n        import json\n        gdf = gpd.read_file(data)\n        data = json.loads(gdf.to_json())\n        geojson = ipyleaflet.GeoJSON(data=data, **kwargs)\n        self.add_layer(geojson)\n        #return geojson\n\n    def add_vector(self, data, **kwargs):\n\"\"\"Adds a Vector layer to the map.\"\"\"\n        import geopandas as gpd\n        import json\n        gdf = gpd.read_file(data)\n        data = json.loads(gdf.to_json())\n        vector = ipyleaflet.VectorLayer(data=data, **kwargs)\n        self.add_layer(vector)\n        #return vector\n\n\n\n    def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n        import httpx\n        titiler_endpoint = \"https://titiler.xyz\" \n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/info\",\n            params = {\n                \"url\": url,\n            }\n        ).json()\n\n        bounds = r[\"bounds\"]\n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/tilejson.json\",\n            params = {\n             \"url\": url,\n            }\n        ).json()\n\n        tile = r['tiles'][0]\n\n        self.add_tile_layer(url=tile, name=name, **kwargs)\n\n        if fit_bounds:\n            bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n            self.fit_bounds(bbox)\n\n    def add_local_raster(self, filename, name='Local Raster', **kwargs):\n        try:\n            import localtilesserver\n        except ImportError:\n            raise ImportError(\"Please install localtilesserver: pip install localtilesserver\")\n\n    def add_toolbar(self):\n        widget_width = \"250px\"\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n        toolbar = widgets.HBox([toolbar_button])\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [toolbar_button, close_button]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n\n        close_button.observe(close_click, \"value\")\n\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n\n        icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                            layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\n        grid\n\n        toolbar = widgets.VBox([toolbar_button])\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n\n        toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n\n        output = widgets.Output()\n        output_ctrl = WidgetControl(widget=output, position=\"bottomright\")\n        self.add_control(output_ctrl)\n\n        basemap = widgets.Dropdown(\n            options=[ \"hybrid\"],\n            value=None,\n            description=\"Basemap:\",\n            style={\"description_width\": \"initial\"},\n            layout=widgets.Layout(width=\"250px\")\n        )\n\n        def change_basemap(change):\n            if change ['new']:\n                with output:\n                    print(basemap)\n                self.add_basemap(basemap.value)\n\n\n        basemap.observe(change_basemap, 'value')\n\n\n        basemap_ctrl = WidgetControl(widget = basemap, position=\"topright\")\n\n        def tool_click(b):    \n             with output:\n                output.clear_output()\n                print(f\"You clicked the {b.icon} button\")\n\n                if b.icon == 'map':\n                    self.add(basemap_ctrl)\n\n        for i in range(rows):\n            for j in range(cols):\n                tool = grid[i, j]\n                tool.on_click(tool_click)\n\n\n        self.add_control(toolbar_ctrl)\n\n\n\n\n    # def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n    #     \"\"\"Adds a raster layer to the map.\n    #         Args:\n    #             url (str): The URL of the raster.\n    #             name (str): The name of the raster.\n    #             fit_bounds (bool): Whether to fit the map bounds to the raster.\n    #     \"\"\"\n    #     import httpx\n\n    #     titiler_endpoint = \"https://titiler.xyz\" \n\n    #     r = httpx.get(\n    #         f\"{titiler_endpoint}/cog/info\",\n    #         params = {\n    #             \"url\": url,\n    #         }\n    #     ).json()\n\n    #     bounds = r[\"bounds\"]\n\n    #     r = httpx.get(\n    #         f\"{titiler_endpoint}/cog/tilejson.json\",\n    #         params = {\n    #             \"url\": url,\n    #         }\n    #     ).json()\n\n    #     tile = r[\"tiles\"][0]\n\n    #     self.add_tile_layer(url=tile, name=name, attribution=\"raster\", **kwargs)\n\n    #     if fit_bounds:\n    #         bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n    #         self.fit_bounds(bbox)\n\n    # def add_local_raster(self, filename, name='Local Raster', **kwargs):\n    #     try:\n    #         import localtilesserver\n    #     except ImportError:\n    #         raise ImportError(\"Please install localtilesserver: pip install localtilesserver\")\n\n    # def opacity_slider(self, value=0.1, min=0, max=1, position=\"bottomright\"):\n    #     \"\"\"Adds an opacity slider to the map.\n\n    #     Args:   \n    #         value (float): The initial value of the slider.\n    #         min (float): The minimum value of the slider.\n    #         max (float): The maximum value of the slider.\n    #         position (str): The position of the slider.\n\n\n    #     slider = widgets.FloatSlider(value=value, min=min ,max=max)\n    #     widgets.jslink((self.layers[1], 'opacity'), (slider, 'value'))\n    #     control = WidgetControl(widget=slider, position=position)\n    #     self.add_control(control)\n\n\n    def add_image(self, url, width=100, height=100, position=\"bottomleft\"):\n\"\"\"Adds an image to the map.\n\n        Args:\n            url (str): The URL of the image.\n            width (str): The width of the image.\n            height (str): The height of the image.\n            position (str): The position of the image.\n        \"\"\"\n\n        widget = widgets.HTML(value=f\"&lt;img src={url} width='{width}' height='{height}'&gt;\")\n        control = WidgetControl(widget=widget, position = position)\n        self.add_control(control)\n</code></pre>"},{"location":"rocksnot/#rocksnot.rocksnot.Map.add_basemap","title":"<code>add_basemap(self, basemap)</code>","text":"<p>Adds a basemap to the map.</p> Source code in <code>rocksnot/rocksnot.py</code> <pre><code>def add_basemap(self, basemap):\n\"\"\"Adds a basemap to the map.\"\"\"\n    import xyzservices.providers as xyz\n\n    if basemap.lower() == \"hybrid\":\n        url = \"https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z}\"\n        self.add_tile_layer(url, name=basemap)\n\n    else:\n        try:\n            layer = eval(f\"xyz.{basemap}\")\n            url = layer.build_url()\n            attribution = layer.attribution\n            self.add_tile_layer(url=url, attribution=attribution, name=basemap)\n\n        except:\n            raise ValueError(f\"Invalid basemap name: {basemap}\")\n</code></pre>"},{"location":"rocksnot/#rocksnot.rocksnot.Map.add_draw_control","title":"<code>add_draw_control(self, **kwargs)</code>","text":"<p>Adds a draw control to the map.</p> Source code in <code>rocksnot/rocksnot.py</code> <pre><code>def add_draw_control(self, **kwargs):\n\"\"\"Adds a draw control to the map.\"\"\"\n    draw_control = ipyleaflet.DrawControl(**kwargs)\n\n    draw_control.polyline =  {\n        \"shapeOptions\": {\n            \"color\": \"#6bc2e5\",\n            \"weight\": 8,\n            \"opacity\": 1.0\n        }\n    }\n    draw_control.polygon = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#6be5c3\",\n            \"color\": \"#6be5c3\",\n            \"fillOpacity\": 1.0\n        },\n        \"drawError\": {\n            \"color\": \"#dd253b\",\n            \"message\": \"Oups!\"\n        },\n        \"allowIntersection\": False\n    }\n    draw_control.circle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#efed69\",\n            \"color\": \"#efed69\",\n            \"fillOpacity\": 1.0\n        }\n    }\n    draw_control.rectangle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#fca45d\",\n            \"color\": \"#fca45d\",\n            \"fillOpacity\": 1.0\n        }\n    }\n\n    self.add_control(draw_control)\n</code></pre>"},{"location":"rocksnot/#rocksnot.rocksnot.Map.add_fullscreen_control","title":"<code>add_fullscreen_control(self, position='topleft')</code>","text":"<p>Adds a fullscreen control to the map.</p> Source code in <code>rocksnot/rocksnot.py</code> <pre><code>def add_fullscreen_control(self, position=\"topleft\"):\n\"\"\"Adds a fullscreen control to the map.\"\"\"\n    fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n    self.add_control(fullscreen_control)\n</code></pre>"},{"location":"rocksnot/#rocksnot.rocksnot.Map.add_geojson","title":"<code>add_geojson(self, data, **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> Source code in <code>rocksnot/rocksnot.py</code> <pre><code>def add_geojson(self, data, **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\"\"\"\n    import json\n\n    if isinstance(data, str):\n        with open(data, \"r\") as f:\n            data = json.load(f)\n\n    geojson = ipyleaflet.GeoJSON(data=data, **kwargs)\n    self.add_layer(geojson)\n</code></pre>"},{"location":"rocksnot/#rocksnot.rocksnot.Map.add_image","title":"<code>add_image(self, url, width=100, height=100, position='bottomleft')</code>","text":"<p>Adds an image to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the image.</p> required <code>width</code> <code>str</code> <p>The width of the image.</p> <code>100</code> <code>height</code> <code>str</code> <p>The height of the image.</p> <code>100</code> <code>position</code> <code>str</code> <p>The position of the image.</p> <code>'bottomleft'</code> Source code in <code>rocksnot/rocksnot.py</code> <pre><code>def add_image(self, url, width=100, height=100, position=\"bottomleft\"):\n\"\"\"Adds an image to the map.\n\n    Args:\n        url (str): The URL of the image.\n        width (str): The width of the image.\n        height (str): The height of the image.\n        position (str): The position of the image.\n    \"\"\"\n\n    widget = widgets.HTML(value=f\"&lt;img src={url} width='{width}' height='{height}'&gt;\")\n    control = WidgetControl(widget=widget, position = position)\n    self.add_control(control)\n</code></pre>"},{"location":"rocksnot/#rocksnot.rocksnot.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map.</p> Source code in <code>rocksnot/rocksnot.py</code> <pre><code>def add_layers_control(self, position=\"topright\"):\n\"\"\"Adds a layers control to the map.\"\"\"\n    layers_control = ipyleaflet.LayersControl(position=position)\n    self.add_control(layers_control)\n</code></pre>"},{"location":"rocksnot/#rocksnot.rocksnot.Map.add_search_control","title":"<code>add_search_control(self, position='topleft', **kwargs)</code>","text":"<p>Adds a search control to the map.</p> Source code in <code>rocksnot/rocksnot.py</code> <pre><code>def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Adds a search control to the map.\"\"\"\n    if \"url\" not in kwargs:\n        kwargs[\"url\"] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n\n    search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n    self.add_control(search_control)\n</code></pre>"},{"location":"rocksnot/#rocksnot.rocksnot.Map.add_shp","title":"<code>add_shp(self, data, **kwargs)</code>","text":"<p>Adds a Shapefile layer to the map.</p> Source code in <code>rocksnot/rocksnot.py</code> <pre><code>def add_shp(self, data, **kwargs):\n\"\"\"Adds a Shapefile layer to the map.\"\"\"\n    import geopandas as gpd\n    import json\n    gdf = gpd.read_file(data)\n    data = json.loads(gdf.to_json())\n    geojson = ipyleaflet.GeoJSON(data=data, **kwargs)\n    self.add_layer(geojson)\n    #return geojson\n</code></pre>"},{"location":"rocksnot/#rocksnot.rocksnot.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> Source code in <code>rocksnot/rocksnot.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\"\"\"\n    tile_layer = ipyleaflet.TileLayer(url=url, attribution=attribution, name=name, **kwargs)\n    self.add_layer(tile_layer)\n</code></pre>"},{"location":"rocksnot/#rocksnot.rocksnot.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Adds a Vector layer to the map.</p> Source code in <code>rocksnot/rocksnot.py</code> <pre><code>def add_vector(self, data, **kwargs):\n\"\"\"Adds a Vector layer to the map.\"\"\"\n    import geopandas as gpd\n    import json\n    gdf = gpd.read_file(data)\n    data = json.loads(gdf.to_json())\n    vector = ipyleaflet.VectorLayer(data=data, **kwargs)\n    self.add_layer(vector)\n    #return vector\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use rocksnot in a project:</p> <pre><code>import rocksnot\n</code></pre>"}]}